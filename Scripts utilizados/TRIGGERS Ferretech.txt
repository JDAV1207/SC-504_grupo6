--TRIGGERS 

--AUDITA POR MEDIO DE CONSOLA CUANDO SE INSERTA UNA VENTA
CREATE OR REPLACE TRIGGER trg_auditar_ventas
AFTER INSERT ON VENTAS
FOR EACH ROW
BEGIN
    DBMS_OUTPUT.PUT_LINE('Nueva venta registrada: ID = ' || :NEW.ID_VENTA);
END;
/


--EVITA PRECIOS NEGATIVOS EN PRODUCTO
CREATE OR REPLACE TRIGGER trg_validar_precio_producto
BEFORE INSERT OR UPDATE ON PRODUCTOS
FOR EACH ROW
BEGIN
    IF :NEW.PRECIO < 0 THEN
        RAISE_APPLICATION_ERROR(-20001, 'El precio no puede ser negativo.');
    END IF;
END;
/


--PONE FECHA CUANDO NO SE PONEN
CREATE OR REPLACE TRIGGER trg_fecha_venta_default
BEFORE INSERT ON VENTAS
FOR EACH ROW
BEGIN
    IF :NEW.FECHA_VENTA IS NULL THEN
        :NEW.FECHA_VENTA := SYSDATE;
    END IF;
END;
/


--EVITA QUE SE BORREN EMPLEADOS CON VENTAS
CREATE OR REPLACE TRIGGER trg_evitar_borrar_empleado
BEFORE DELETE ON EMPLEADOS
FOR EACH ROW
DECLARE
    v_count NUMBER;
BEGIN
    SELECT COUNT(*) INTO v_count FROM VENTAS WHERE ID_EMPLEADO = :OLD.ID_EMPLEADO;
    IF v_count > 0 THEN
        RAISE_APPLICATION_ERROR(-20002, 'No se puede eliminar un empleado con ventas registradas.');
    END IF;
END;
/


--VERIFICA QUE EL CORRECTO SEA CORRECTO
CREATE OR REPLACE TRIGGER trg_validar_correo_cliente
BEFORE INSERT OR UPDATE ON CLIENTES
FOR EACH ROW
BEGIN
    IF NOT REGEXP_LIKE(:NEW.CORREO, '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$') THEN
        RAISE_APPLICATION_ERROR(-20003, 'El formato del correo es inv√°lido.');
    END IF;
END;
/
