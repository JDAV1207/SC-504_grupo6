package project_ferretech;

import java.sql.*;
import javax.swing.JOptionPane;
import java.sql.Connection;

public class Menu extends javax.swing.JFrame {

    public Menu() {
        initComponents();

    }

    // MÃ©todo para obtener un nuevo ID
    private int obtenerNuevoID() {
        int nuevoID = 1;
        try (Connection con = ConexionOracle.getConnection(); Statement stmt = con.createStatement(); ResultSet rs = stmt.executeQuery("SELECT NVL(MAX(ID_CATEGORIA), 0) + 1 FROM CATEGORIAS")) {
            if (rs.next()) {
                nuevoID = rs.getInt(1);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return nuevoID;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        Empleados = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tablaEmpleados = new javax.swing.JTable();
        CrearEmpleado = new javax.swing.JButton();
        EditarEmpleado = new javax.swing.JButton();
        EliminarEmpleado = new javax.swing.JButton();
        Clientes = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        tablaClientes = new javax.swing.JTable();
        CrearClientes = new javax.swing.JButton();
        EditarClientes = new javax.swing.JButton();
        EliminarClientes = new javax.swing.JButton();
        Compras = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaCompras = new javax.swing.JTable();
        CrearCompra = new javax.swing.JButton();
        EditarCompra = new javax.swing.JButton();
        EliminarCompra = new javax.swing.JButton();
        Ventas = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tablaVentas = new javax.swing.JTable();
        CrearVentas = new javax.swing.JButton();
        EditarVentas = new javax.swing.JButton();
        BorrarVentas = new javax.swing.JButton();
        Categorias = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaCategorias = new javax.swing.JTable();
        CrearCategoria = new javax.swing.JButton();
        EditarCategoria = new javax.swing.JButton();
        BorrarCategoria = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        tablaProveedor = new javax.swing.JTable();
        CrearProveedor = new javax.swing.JButton();
        EditarProveedor = new javax.swing.JButton();
        BorrarProveedor = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane7 = new javax.swing.JScrollPane();
        tablaProducto = new javax.swing.JTable();
        CrearProducto = new javax.swing.JButton();
        EditarProducto = new javax.swing.JButton();
        BorrarProducto = new javax.swing.JButton();
        DetVentas = new javax.swing.JPanel();
        jScrollPane8 = new javax.swing.JScrollPane();
        tablaDetVentas = new javax.swing.JTable();
        CrearDetVentas = new javax.swing.JButton();
        EditarDetVentas = new javax.swing.JButton();
        EliminarDetVentas = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("FERRETEC");
        setForeground(new java.awt.Color(204, 255, 204));
        setName(""); // NOI18N

        jTabbedPane1.setBackground(new java.awt.Color(255, 255, 102));
        jTabbedPane1.setFont(new java.awt.Font("STIXGeneral", 0, 15)); // NOI18N
        jTabbedPane1.setName("FERRETECH"); // NOI18N

        tablaEmpleados.setModel(project_ferretech.EmpleadoDAO.obtenerEmpleados());
        tablaEmpleados.setName("FERRETECH"); // NOI18N
        jScrollPane3.setViewportView(tablaEmpleados);

        CrearEmpleado.setText("Crear");
        CrearEmpleado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CrearEmpleadoActionPerformed(evt);
            }
        });

        EditarEmpleado.setText("Editar");
        EditarEmpleado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditarEmpleadoActionPerformed(evt);
            }
        });

        EliminarEmpleado.setText("Eliminar");
        EliminarEmpleado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EliminarEmpleadoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout EmpleadosLayout = new javax.swing.GroupLayout(Empleados);
        Empleados.setLayout(EmpleadosLayout);
        EmpleadosLayout.setHorizontalGroup(
            EmpleadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(EmpleadosLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 491, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addGroup(EmpleadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(EditarEmpleado)
                    .addComponent(EliminarEmpleado)
                    .addComponent(CrearEmpleado))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        EmpleadosLayout.setVerticalGroup(
            EmpleadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(EmpleadosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(EmpleadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 329, Short.MAX_VALUE)
                    .addGroup(EmpleadosLayout.createSequentialGroup()
                        .addComponent(CrearEmpleado)
                        .addGap(18, 18, 18)
                        .addComponent(EditarEmpleado)
                        .addGap(18, 18, 18)
                        .addComponent(EliminarEmpleado)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Empleados", Empleados);

        tablaClientes.setModel(project_ferretech.ClienteDAO.obtenerClientes());
        tablaClientes.setName("FERRETECH"); // NOI18N
        jScrollPane5.setViewportView(tablaClientes);

        CrearClientes.setText("Crear");
        CrearClientes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CrearClientesActionPerformed(evt);
            }
        });

        EditarClientes.setText("Editar");
        EditarClientes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditarClientesActionPerformed(evt);
            }
        });

        EliminarClientes.setText("Eliminar");
        EliminarClientes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EliminarClientesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ClientesLayout = new javax.swing.GroupLayout(Clientes);
        Clientes.setLayout(ClientesLayout);
        ClientesLayout.setHorizontalGroup(
            ClientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ClientesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 491, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addGroup(ClientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(EditarClientes)
                    .addComponent(EliminarClientes)
                    .addComponent(CrearClientes))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        ClientesLayout.setVerticalGroup(
            ClientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ClientesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ClientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 329, Short.MAX_VALUE)
                    .addGroup(ClientesLayout.createSequentialGroup()
                        .addComponent(CrearClientes)
                        .addGap(18, 18, 18)
                        .addComponent(EditarClientes)
                        .addGap(18, 18, 18)
                        .addComponent(EliminarClientes)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Clientes", Clientes);

        tablaCompras.setModel(project_ferretech.CompraDAO.obtenerCompras());
        jScrollPane2.setViewportView(tablaCompras);

        CrearCompra.setText("Crear");
        CrearCompra.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CrearCompraActionPerformed(evt);
            }
        });

        EditarCompra.setText("Editar");
        EditarCompra.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditarCompraActionPerformed(evt);
            }
        });

        EliminarCompra.setText("Eliminar");
        EliminarCompra.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EliminarCompraActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ComprasLayout = new javax.swing.GroupLayout(Compras);
        Compras.setLayout(ComprasLayout);
        ComprasLayout.setHorizontalGroup(
            ComprasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ComprasLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 491, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addGroup(ComprasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(EditarCompra)
                    .addComponent(EliminarCompra)
                    .addComponent(CrearCompra))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        ComprasLayout.setVerticalGroup(
            ComprasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ComprasLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ComprasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 329, Short.MAX_VALUE)
                    .addGroup(ComprasLayout.createSequentialGroup()
                        .addComponent(CrearCompra)
                        .addGap(18, 18, 18)
                        .addComponent(EditarCompra)
                        .addGap(18, 18, 18)
                        .addComponent(EliminarCompra)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Compras", Compras);

        tablaVentas.setModel(project_ferretech.VentaDAO.obtenerVentas());
        jScrollPane4.setViewportView(tablaVentas);

        CrearVentas.setText("Crear");
        CrearVentas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CrearVentasActionPerformed(evt);
            }
        });

        EditarVentas.setText("Editar");
        EditarVentas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditarVentasActionPerformed(evt);
            }
        });

        BorrarVentas.setText("Eliminar");
        BorrarVentas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BorrarVentasActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout VentasLayout = new javax.swing.GroupLayout(Ventas);
        Ventas.setLayout(VentasLayout);
        VentasLayout.setHorizontalGroup(
            VentasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(VentasLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 491, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(VentasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(BorrarVentas, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(VentasLayout.createSequentialGroup()
                        .addGroup(VentasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(CrearVentas)
                            .addComponent(EditarVentas))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 1, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(26, 26, 26))
        );
        VentasLayout.setVerticalGroup(
            VentasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(VentasLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(VentasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 329, Short.MAX_VALUE)
                    .addGroup(VentasLayout.createSequentialGroup()
                        .addComponent(CrearVentas)
                        .addGap(18, 18, 18)
                        .addComponent(EditarVentas)
                        .addGap(18, 18, 18)
                        .addComponent(BorrarVentas)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Ventas", Ventas);

        tablaCategorias.setModel(CategoriaDAO.obtenerCategorias());
        jScrollPane1.setViewportView(tablaCategorias);

        CrearCategoria.setText("Crear");
        CrearCategoria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CrearCategoriaActionPerformed(evt);
            }
        });

        EditarCategoria.setText("Editar");
        EditarCategoria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditarCategoriaActionPerformed(evt);
            }
        });

        BorrarCategoria.setText("Eliminar");
        BorrarCategoria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BorrarCategoriaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout CategoriasLayout = new javax.swing.GroupLayout(Categorias);
        Categorias.setLayout(CategoriasLayout);
        CategoriasLayout.setHorizontalGroup(
            CategoriasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CategoriasLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 491, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(CategoriasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(BorrarCategoria, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(CategoriasLayout.createSequentialGroup()
                        .addGroup(CategoriasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(CrearCategoria)
                            .addComponent(EditarCategoria))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 1, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(26, 26, 26))
        );
        CategoriasLayout.setVerticalGroup(
            CategoriasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CategoriasLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(CategoriasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 329, Short.MAX_VALUE)
                    .addGroup(CategoriasLayout.createSequentialGroup()
                        .addComponent(CrearCategoria)
                        .addGap(18, 18, 18)
                        .addComponent(EditarCategoria)
                        .addGap(18, 18, 18)
                        .addComponent(BorrarCategoria)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Categorias", Categorias);

        tablaProveedor.setModel(ProveedorDAO.obtenerProveedores());
        jScrollPane6.setViewportView(tablaProveedor);

        CrearProveedor.setText("Crear");
        CrearProveedor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CrearProveedorActionPerformed(evt);
            }
        });

        EditarProveedor.setText("Editar");
        EditarProveedor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditarProveedorActionPerformed(evt);
            }
        });

        BorrarProveedor.setText("Eliminar");
        BorrarProveedor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BorrarProveedorActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 491, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(BorrarProveedor, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(CrearProveedor)
                            .addComponent(EditarProveedor))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 1, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(26, 26, 26))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 329, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(CrearProveedor)
                        .addGap(18, 18, 18)
                        .addComponent(EditarProveedor)
                        .addGap(18, 18, 18)
                        .addComponent(BorrarProveedor)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Proveedores", jPanel1);

        tablaProducto.setModel(ProveedorDAO.obtenerProveedores());
        jScrollPane7.setViewportView(tablaProducto);

        CrearProducto.setText("Crear");
        CrearProducto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CrearProductoActionPerformed(evt);
            }
        });

        EditarProducto.setText("Editar");
        EditarProducto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditarProductoActionPerformed(evt);
            }
        });

        BorrarProducto.setText("Eliminar");
        BorrarProducto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BorrarProductoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 491, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(BorrarProducto, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(CrearProducto)
                            .addComponent(EditarProducto))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 1, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(26, 26, 26))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 329, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(CrearProducto)
                        .addGap(18, 18, 18)
                        .addComponent(EditarProducto)
                        .addGap(18, 18, 18)
                        .addComponent(BorrarProducto)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Productos", jPanel2);

        tablaDetVentas.setModel(project_ferretech.ClienteDAO.obtenerClientes());
        tablaDetVentas.setName("FERRETECH"); // NOI18N
        jScrollPane8.setViewportView(tablaDetVentas);

        CrearDetVentas.setText("Crear");
        CrearDetVentas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CrearDetVentasActionPerformed(evt);
            }
        });

        EditarDetVentas.setText("Editar");
        EditarDetVentas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditarDetVentasActionPerformed(evt);
            }
        });

        EliminarDetVentas.setText("Eliminar");
        EliminarDetVentas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EliminarDetVentasActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout DetVentasLayout = new javax.swing.GroupLayout(DetVentas);
        DetVentas.setLayout(DetVentasLayout);
        DetVentasLayout.setHorizontalGroup(
            DetVentasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(DetVentasLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 491, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addGroup(DetVentasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(EditarDetVentas)
                    .addComponent(EliminarDetVentas)
                    .addComponent(CrearDetVentas))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        DetVentasLayout.setVerticalGroup(
            DetVentasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(DetVentasLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(DetVentasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane8, javax.swing.GroupLayout.DEFAULT_SIZE, 329, Short.MAX_VALUE)
                    .addGroup(DetVentasLayout.createSequentialGroup()
                        .addComponent(CrearDetVentas)
                        .addGap(18, 18, 18)
                        .addComponent(EditarDetVentas)
                        .addGap(18, 18, 18)
                        .addComponent(EliminarDetVentas)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Detalle Ventas", DetVentas);

        jPanel4.setBackground(new java.awt.Color(255, 255, 102));

        jLabel1.setFont(new java.awt.Font("STIXGeneral", 0, 48)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(51, 102, 255));
        jLabel1.setText("FerreTech");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(206, 206, 206))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jLabel1)
                .addContainerGap(14, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1))
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );

        getAccessibleContext().setAccessibleName("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BorrarCategoriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BorrarCategoriaActionPerformed
        int fila = tablaCategorias.getSelectedRow();
        if (fila == -1) {
            JOptionPane.showMessageDialog(this, "Seleccione una categorÃ­a.");
            return;
        }

        int id = (int) tablaCategorias.getValueAt(fila, 0);

        int confirm = JOptionPane.showConfirmDialog(this, "Â¿Seguro que desea eliminar esta categorÃ­a?", "Confirmar", JOptionPane.YES_NO_OPTION);
        if (confirm == JOptionPane.YES_OPTION) {
            try (Connection con = ConexionOracle.getConnection(); CallableStatement stmt = con.prepareCall("{CALL ELIMINAR_CATEGORIA(?)}")) {

                stmt.setInt(1, id);
                stmt.execute();

                JOptionPane.showMessageDialog(this, "CategorÃ­a eliminada.");
                tablaCategorias.setModel(CategoriaDAO.obtenerCategorias());
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_BorrarCategoriaActionPerformed

    private void EditarCategoriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditarCategoriaActionPerformed
        int fila = tablaCategorias.getSelectedRow();
        if (fila == -1) {
            JOptionPane.showMessageDialog(this, "Seleccione una categorÃ­a.");
            return;
        }

        int id = (int) tablaCategorias.getValueAt(fila, 0);
        String nuevoNombre = JOptionPane.showInputDialog("Nuevo nombre:", tablaCategorias.getValueAt(fila, 1));

        if (nuevoNombre != null && !nuevoNombre.trim().isEmpty()) {
            try (Connection con = ConexionOracle.getConnection(); CallableStatement stmt = con.prepareCall("{CALL ACTUALIZAR_CATEGORIA(?,?)}")) {

                stmt.setInt(1, id);
                stmt.setString(2, nuevoNombre);
                stmt.execute();

                JOptionPane.showMessageDialog(this, "CategorÃ­a actualizada.");
                tablaCategorias.setModel(CategoriaDAO.obtenerCategorias());
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_EditarCategoriaActionPerformed

    private void CrearCategoriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CrearCategoriaActionPerformed
        String nombre = JOptionPane.showInputDialog("Ingrese el nombre de la categorÃ­a:");

        if (nombre != null && !nombre.trim().isEmpty()) {
            try (Connection con = ConexionOracle.getConnection(); CallableStatement stmt = con.prepareCall("{CALL INSERTAR_CATEGORIA(?,?)}")) {

                stmt.setInt(1, obtenerNuevoID());
                stmt.setString(2, nombre);
                stmt.execute();

                JOptionPane.showMessageDialog(this, "CategorÃ­a creada.");
                tablaCategorias.setModel(CategoriaDAO.obtenerCategorias());
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_CrearCategoriaActionPerformed

    private void CrearCompraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CrearCompraActionPerformed
        int idProveedor;
        double total;
        String fechaCompra;

        try {
            idProveedor = Integer.parseInt(JOptionPane.showInputDialog("Ingrese el ID del proveedor:"));
            fechaCompra = JOptionPane.showInputDialog("Ingrese la fecha de compra (YYYY-MM-DD):");
            total = Double.parseDouble(JOptionPane.showInputDialog("Ingrese el total de la compra:"));

            if (fechaCompra != null && !fechaCompra.trim().isEmpty()) {
                try (Connection con = ConexionOracle.getConnection(); CallableStatement stmt = con.prepareCall("{CALL INSERTAR_COMPRA(?, ?, ?, ?)}")) {

                    stmt.setInt(1, obtenerNuevoID());
                    stmt.setInt(2, idProveedor);
                    stmt.setDate(3, Date.valueOf(fechaCompra));
                    stmt.setDouble(4, total);
                    stmt.execute();

                    JOptionPane.showMessageDialog(this, "Compra creada.");
                    tablaCompras.setModel(CompraDAO.obtenerCompras());
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Error: Ingrese valores numÃ©ricos vÃ¡lidos.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_CrearCompraActionPerformed

    private void EditarCompraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditarCompraActionPerformed
        int fila = tablaCompras.getSelectedRow();
        if (fila == -1) {
            JOptionPane.showMessageDialog(this, "Seleccione una compra.");
            return;
        }

        int id = (int) tablaCompras.getValueAt(fila, 0);
        int idProveedor;
        double total;
        String fechaCompra;

        try {
            idProveedor = Integer.parseInt(JOptionPane.showInputDialog("Nuevo ID del proveedor:", tablaCompras.getValueAt(fila, 1)));
            fechaCompra = JOptionPane.showInputDialog("Nueva fecha de compra (YYYY-MM-DD):", tablaCompras.getValueAt(fila, 2));
            total = Double.parseDouble(JOptionPane.showInputDialog("Nuevo total de la compra:", tablaCompras.getValueAt(fila, 3)));

            if (fechaCompra != null && !fechaCompra.trim().isEmpty()) {
                try (Connection con = ConexionOracle.getConnection(); CallableStatement stmt = con.prepareCall("{CALL ACTUALIZAR_COMPRA(?, ?, ?, ?)}")) {

                    stmt.setInt(1, id);
                    stmt.setInt(2, idProveedor);
                    stmt.setDate(3, Date.valueOf(fechaCompra));
                    stmt.setDouble(4, total);
                    stmt.execute();

                    JOptionPane.showMessageDialog(this, "Compra actualizada.");
                    tablaCompras.setModel(CompraDAO.obtenerCompras());
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Error: Ingrese valores numÃ©ricos vÃ¡lidos.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_EditarCompraActionPerformed

    private void EliminarCompraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EliminarCompraActionPerformed
        int fila = tablaCompras.getSelectedRow();
        if (fila == -1) {
            JOptionPane.showMessageDialog(this, "Seleccione una compra.");
            return;
        }

        int id = (int) tablaCompras.getValueAt(fila, 0);

        int confirm = JOptionPane.showConfirmDialog(this, "Â¿Seguro que desea eliminar esta compra?", "Confirmar", JOptionPane.YES_NO_OPTION);
        if (confirm == JOptionPane.YES_OPTION) {
            try (Connection con = ConexionOracle.getConnection(); CallableStatement stmt = con.prepareCall("{CALL ELIMINAR_COMPRA(?)}")) {

                stmt.setInt(1, id);
                stmt.execute();

                JOptionPane.showMessageDialog(this, "Compra eliminada.");
                tablaCompras.setModel(CompraDAO.obtenerCompras());
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_EliminarCompraActionPerformed

    private void CrearEmpleadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CrearEmpleadoActionPerformed
        int idEmpleado;
        String nombre;
        String cargo;
        String telefono;
        String correo;

        try {
            idEmpleado = Integer.parseInt(JOptionPane.showInputDialog("Ingrese el ID del empleado:"));
            nombre = JOptionPane.showInputDialog("Ingrese el nombre y apellido del empleado:");
            cargo = JOptionPane.showInputDialog("Ingrese el cargo del empleado:");
            telefono = JOptionPane.showInputDialog("Ingrese el telefono del empleado, separado por un guion (8888-8888):");
            correo = JOptionPane.showInputDialog("Ingrese el correo del empleado:");

            if (nombre != null && !nombre.trim().isEmpty()) {
                try (Connection con = ConexionOracle.getConnection(); CallableStatement stmt = con.prepareCall("{CALL INSERTAR_EMPLEADO(?, ?, ?, ?, ?)}")) {

                    stmt.setInt(1, idEmpleado);
                    stmt.setString(2, nombre);
                    stmt.setString(3, cargo);
                    stmt.setString(4, telefono);
                    stmt.setString(5, correo);
                    stmt.execute();

                    JOptionPane.showMessageDialog(this, "Empleado registrado.");
                    tablaEmpleados.setModel(EmpleadoDAO.obtenerEmpleados());
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Error: Ingrese valores numÃ©ricos vÃ¡lidos.", "Error", JOptionPane.ERROR_MESSAGE);
        }    }//GEN-LAST:event_CrearEmpleadoActionPerformed

    private void EditarEmpleadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditarEmpleadoActionPerformed
        int fila = tablaEmpleados.getSelectedRow();
        if (fila == -1) {
            JOptionPane.showMessageDialog(this, "Seleccione un empleado.");
            return;
        }

        int idEmpleado = (int) tablaEmpleados.getValueAt(fila, 0);
        String nombre;
        String cargo;
        String telefono;
        String correo;

        try {
            nombre = JOptionPane.showInputDialog("Ingrese el nuevo nombre y apellido del empleado:", tablaEmpleados.getValueAt(fila, 1));
            cargo = JOptionPane.showInputDialog("Ingrese el nuevo cargo del empleado:", tablaEmpleados.getValueAt(fila, 2));
            telefono = JOptionPane.showInputDialog("Ingrese el nuevo telefono del empleado, separado por un guion (8888-8888):", tablaEmpleados.getValueAt(fila, 3));
            correo = JOptionPane.showInputDialog("Ingrese el nuevo correo del empleado:", tablaEmpleados.getValueAt(fila, 4));

            if (nombre != null && !nombre.trim().isEmpty()) {
                try (Connection con = ConexionOracle.getConnection(); CallableStatement stmt = con.prepareCall("{CALL ACTUALIZAR_EMPLEADO(?, ?, ?, ?, ?)}")) {

                    stmt.setInt(1, idEmpleado);
                    stmt.setString(2, nombre);
                    stmt.setString(3, cargo);
                    stmt.setString(4, telefono);
                    stmt.setString(5, correo);
                    stmt.execute();

                    JOptionPane.showMessageDialog(this, "Empleado actualizado.");
                    tablaEmpleados.setModel(EmpleadoDAO.obtenerEmpleados());
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Error: Ingrese valores numÃ©ricos vÃ¡lidos.", "Error", JOptionPane.ERROR_MESSAGE);
        }    }//GEN-LAST:event_EditarEmpleadoActionPerformed

    private void EliminarEmpleadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EliminarEmpleadoActionPerformed
        int fila = tablaEmpleados.getSelectedRow();
        if (fila == -1) {
            JOptionPane.showMessageDialog(this, "Seleccione un empleado.");
            return;
        }

        int id = (int) tablaEmpleados.getValueAt(fila, 0);

        int confirm = JOptionPane.showConfirmDialog(this, "Â¿Seguro que desea eliminar este empleado?", "Confirmar", JOptionPane.YES_NO_OPTION);
        if (confirm == JOptionPane.YES_OPTION) {
            try (Connection con = ConexionOracle.getConnection(); CallableStatement stmt = con.prepareCall("{CALL ELIMINAR_EMPLEADO(?)}")) {

                stmt.setInt(1, id);
                stmt.execute();

                JOptionPane.showMessageDialog(this, "Empleado eliminado.");
                tablaEmpleados.setModel(EmpleadoDAO.obtenerEmpleados());
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_EliminarEmpleadoActionPerformed

    private void CrearClientesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CrearClientesActionPerformed
        int idCliente;
        String nombre;
        String telefono;
        String direccion;
        String correo;

        try {
            idCliente = Integer.parseInt(JOptionPane.showInputDialog("Ingrese el ID del cliente:"));
            nombre = JOptionPane.showInputDialog("Ingrese el nombre y apellido del cliente:");
            telefono = JOptionPane.showInputDialog("Ingrese el telefono del cliente, separado por un guion (8888-8888):");
            direccion = JOptionPane.showInputDialog("Ingrese la direccion del cliente:");
            correo = JOptionPane.showInputDialog("Ingrese el correo del cliente:");

            if (nombre != null && !nombre.trim().isEmpty()) {
                try (Connection con = ConexionOracle.getConnection(); CallableStatement stmt = con.prepareCall("{CALL INSERTAR_CLIENTE(?, ?, ?, ?, ?)}")) {

                    stmt.setInt(1, idCliente);
                    stmt.setString(2, nombre);
                    stmt.setString(3, telefono);
                    stmt.setString(4, direccion);
                    stmt.setString(5, correo);
                    stmt.execute();

                    JOptionPane.showMessageDialog(this, "Cliente registrado.");
                    tablaClientes.setModel(ClienteDAO.obtenerClientes());
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Error: Ingrese valores numÃ©ricos vÃ¡lidos.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_CrearClientesActionPerformed

    private void EditarClientesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditarClientesActionPerformed
        int fila = tablaClientes.getSelectedRow();
        if (fila == -1) {
            JOptionPane.showMessageDialog(this, "Seleccione un cliente.");
            return;
        }

        int idCliente = (int) tablaClientes.getValueAt(fila, 0);
        String nombre;
        String telefono;
        String direccion;
        String correo;

        try {
            nombre = JOptionPane.showInputDialog("Ingrese el nuevo nombre y apellido del cliente:", tablaClientes.getValueAt(fila, 1));
            telefono = JOptionPane.showInputDialog("Ingrese el nuevo telefono del cliente, separado por un guion (8888-8888):", tablaClientes.getValueAt(fila, 2));
            direccion = JOptionPane.showInputDialog("Ingrese la nueva direccion del cliente:", tablaClientes.getValueAt(fila, 3));
            correo = JOptionPane.showInputDialog("Ingrese el nuevo correo del cliente:", tablaClientes.getValueAt(fila, 4));

            if (nombre != null && !nombre.trim().isEmpty()) {
                try (Connection con = ConexionOracle.getConnection(); CallableStatement stmt = con.prepareCall("{CALL ACTUALIZAR_CLIENTE(?, ?, ?, ?, ?)}")) {

                    stmt.setInt(1, idCliente);
                    stmt.setString(2, nombre);
                    stmt.setString(3, telefono);
                    stmt.setString(4, direccion);
                    stmt.setString(5, correo);
                    stmt.execute();

                    JOptionPane.showMessageDialog(this, "Cliente actualizado.");
                    tablaClientes.setModel(ClienteDAO.obtenerClientes());
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Error: Ingrese valores numÃ©ricos vÃ¡lidos.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_EditarClientesActionPerformed

    private void EliminarClientesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EliminarClientesActionPerformed
        int fila = tablaClientes.getSelectedRow();
        if (fila == -1) {
            JOptionPane.showMessageDialog(this, "Seleccione un cliente.");
            return;
        }

        int id = (int) tablaClientes.getValueAt(fila, 0);

        int confirm = JOptionPane.showConfirmDialog(this, "Â¿Seguro que desea eliminar este cliente?", "Confirmar", JOptionPane.YES_NO_OPTION);
        if (confirm == JOptionPane.YES_OPTION) {
            try (Connection con = ConexionOracle.getConnection(); CallableStatement stmt = con.prepareCall("{CALL ELIMINAR_CLIENTE(?)}")) {

                stmt.setInt(1, id);
                stmt.execute();

                JOptionPane.showMessageDialog(this, "Cliente eliminado.");
                tablaClientes.setModel(ClienteDAO.obtenerClientes());
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_EliminarClientesActionPerformed

    private void CrearVentasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CrearVentasActionPerformed
        int idCliente;
        int idEmpleado;
        String fechaVenta;
        double total;

        try {
            idCliente = Integer.parseInt(JOptionPane.showInputDialog("Ingrese el ID del cliente al que se le realizo la venta:"));
            idEmpleado = Integer.parseInt(JOptionPane.showInputDialog("Ingrese el ID del empleado que realizo la venta:"));
            fechaVenta = JOptionPane.showInputDialog("Ingrese la fecha de la venta (YYYY-MM-DD):");
            total = Double.parseDouble(JOptionPane.showInputDialog("Ingrese el total de la venta:"));

            if (fechaVenta != null && !fechaVenta.trim().isEmpty()) {
                try (Connection con = ConexionOracle.getConnection(); CallableStatement stmt = con.prepareCall("{CALL INSERTAR_VENTA(?, ?, ?, ?, ?)}")) {

                    stmt.setInt(1, obtenerNuevoID());
                    stmt.setInt(2, idCliente);
                    stmt.setInt(3, idEmpleado);
                    stmt.setDate(4, Date.valueOf(fechaVenta));
                    stmt.setDouble(5, total);
                    stmt.execute();

                    JOptionPane.showMessageDialog(this, "Venta registrada.");
                    tablaVentas.setModel(VentaDAO.obtenerVentas());
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Error: Ingrese valores numÃ©ricos vÃ¡lidos.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_CrearVentasActionPerformed

    private void EditarVentasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditarVentasActionPerformed
        int fila = tablaVentas.getSelectedRow();
        if (fila == -1) {
            JOptionPane.showMessageDialog(this, "Seleccione una compra.");
            return;
        }

        int id = (int) tablaVentas.getValueAt(fila, 0);
        int idCliente;
        int idEmpleado;
        String fechaVenta;
        double total;

        try {
            idCliente = Integer.parseInt(JOptionPane.showInputDialog("Ingrese el nuevo ID del cliente al que se le realizo la venta:", tablaVentas.getValueAt(fila, 1)));
            idEmpleado = Integer.parseInt(JOptionPane.showInputDialog("Ingrese el nuevo ID del empleado que realizo la venta:", tablaVentas.getValueAt(fila, 2)));
            fechaVenta = JOptionPane.showInputDialog("Ingrese la nueva fecha de la venta (YYYY-MM-DD):", tablaVentas.getValueAt(fila, 3));
            total = Double.parseDouble(JOptionPane.showInputDialog("Ingrese el nuevo total de la venta:", tablaVentas.getValueAt(fila, 4)));

            if (fechaVenta != null && !fechaVenta.trim().isEmpty()) {
                try (Connection con = ConexionOracle.getConnection(); CallableStatement stmt = con.prepareCall("{CALL ACTUALIZAR_VENTA(?, ?, ?, ?, ?)}")) {

                    stmt.setInt(1, id);
                    stmt.setInt(2, idCliente);
                    stmt.setInt(3, idEmpleado);
                    stmt.setDate(4, Date.valueOf(fechaVenta));
                    stmt.setDouble(5, total);
                    stmt.execute();

                    JOptionPane.showMessageDialog(this, "Venta actualizada.");
                    tablaVentas.setModel(VentaDAO.obtenerVentas());
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Error: Ingrese valores numÃ©ricos vÃ¡lidos.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_EditarVentasActionPerformed

    private void BorrarVentasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BorrarVentasActionPerformed
        int fila = tablaVentas.getSelectedRow();
        if (fila == -1) {
            JOptionPane.showMessageDialog(this, "Seleccione una venta.");
            return;
        }

        int id = (int) tablaVentas.getValueAt(fila, 0);

        int confirm = JOptionPane.showConfirmDialog(this, "Â¿Seguro que desea eliminar esta venta?", "Confirmar", JOptionPane.YES_NO_OPTION);
        if (confirm == JOptionPane.YES_OPTION) {
            try (Connection con = ConexionOracle.getConnection(); CallableStatement stmt = con.prepareCall("{CALL ELIMINAR_VENTA(?)}")) {

                stmt.setInt(1, id);
                stmt.execute();

                JOptionPane.showMessageDialog(this, "Venta eliminada.");
                tablaVentas.setModel(VentaDAO.obtenerVentas());
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_BorrarVentasActionPerformed

    private void CrearProveedorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CrearProveedorActionPerformed
        // Solicitar informaciÃ³n sobre proveedor
        String nombre = JOptionPane.showInputDialog("Ingrese el nombre del proveedor:");
        String telefono = JOptionPane.showInputDialog("Ingrese el telÃ©fono del proveedor:");
        String direccion = JOptionPane.showInputDialog("Ingrese la direcciÃ³n del proveedor:");
        String correo = JOptionPane.showInputDialog("Ingrese el correo del proveedor:");

        if (nombre != null && !nombre.trim().isEmpty()
                && telefono != null && !telefono.trim().isEmpty()
                && direccion != null && !direccion.trim().isEmpty()
                && correo != null && !correo.trim().isEmpty()) {

            try (Connection con = ConexionOracle.getConnection(); CallableStatement stmt = con.prepareCall("{CALL INSERTAR_PROVEEDOR(?, ?, ?, ?, ?)}")) {

                stmt.setInt(1, obtenerNuevoID());
                stmt.setString(2, nombre);
                stmt.setString(3, telefono);
                stmt.setString(4, direccion);
                stmt.setString(5, correo);
                stmt.execute();

                JOptionPane.showMessageDialog(this, "Proveedor agregado.");

                tablaProveedor.setModel(ProveedorDAO.obtenerProveedores());

            } catch (SQLException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Error al agregar el proveedor.");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Por favor, complete todos los campos.");
        }
    }//GEN-LAST:event_CrearProveedorActionPerformed

    private void EditarProveedorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditarProveedorActionPerformed
        int fila = tablaProveedor.getSelectedRow();
        if (fila == -1) {
            JOptionPane.showMessageDialog(this, "Seleccione un proveedor.");
            return;
        }

        int id = (int) tablaProveedor.getValueAt(fila, 0);
        String nuevoNombre = JOptionPane.showInputDialog("Nuevo nombre:", tablaProveedor.getValueAt(fila, 1));
        String nuevoTelefono = JOptionPane.showInputDialog("Nuevo telÃ©fono:", tablaProveedor.getValueAt(fila, 2));
        String nuevoDireccion = JOptionPane.showInputDialog("Nueva DirecciÃ³n:", tablaProveedor.getValueAt(fila, 3));
        String nuevoCorreo = JOptionPane.showInputDialog("Nuevo Correo:", tablaProveedor.getValueAt(fila, 4));

        if (nuevoNombre != null && !nuevoNombre.trim().isEmpty() && nuevoTelefono != null && !nuevoTelefono.trim().isEmpty()) {
            try (Connection con = ConexionOracle.getConnection(); CallableStatement stmt = con.prepareCall("{CALL ACTUALIZAR_PROVEEDOR(?, ?, ?, ?, ?)}")) {

                stmt.setInt(1, id);
                stmt.setString(2, nuevoNombre);
                stmt.setString(3, nuevoTelefono);
                stmt.setString(4, nuevoDireccion);
                stmt.setString(5, nuevoCorreo);
                stmt.execute();

                JOptionPane.showMessageDialog(this, "Proveedor actualizado.");
                tablaProveedor.setModel(ProveedorDAO.obtenerProveedores());
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_EditarProveedorActionPerformed

    private void BorrarProveedorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BorrarProveedorActionPerformed
        int fila = tablaProveedor.getSelectedRow();
        if (fila == -1) {
            JOptionPane.showMessageDialog(this, "Seleccione un Proveedor.");
            return;
        }

        int id = (int) tablaProveedor.getValueAt(fila, 0);

        int confirm = JOptionPane.showConfirmDialog(this, "Â¿Seguro que desea eliminar este proveedor?", "Confirmar", JOptionPane.YES_NO_OPTION);
        if (confirm == JOptionPane.YES_OPTION) {
            try (Connection con = ConexionOracle.getConnection(); CallableStatement stmt = con.prepareCall("{CALL ELIMINAR_PROVEEDOR(?)}")) {

                stmt.setInt(1, id);
                stmt.execute();

                JOptionPane.showMessageDialog(this, "Proveedor eliminado.");
                tablaProveedor.setModel(ProveedorDAO.obtenerProveedores());
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_BorrarProveedorActionPerformed

    private void CrearProductoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CrearProductoActionPerformed

        String nombre = JOptionPane.showInputDialog("Ingrese el nombre del producto:");
        String descripcion = JOptionPane.showInputDialog("Ingrese descripciÃ³n del producto:");
        String precioStr = JOptionPane.showInputDialog("Ingrese el precio:");
        String stockStr = JOptionPane.showInputDialog("Ingrese la cantidad en stock:");
        String idCategoriaStr = JOptionPane.showInputDialog("Ingrese el ID de la categorÃ­a:");

        if (nombre != null && !nombre.trim().isEmpty()
                && descripcion != null && !descripcion.trim().isEmpty()
                && precioStr != null && !precioStr.trim().isEmpty()
                && stockStr != null && !stockStr.trim().isEmpty()
                && idCategoriaStr != null && !idCategoriaStr.trim().isEmpty()) {

            try (Connection con = ConexionOracle.getConnection(); CallableStatement stmt = con.prepareCall("{CALL INSERTAR_PRODUCTO(?, ?, ?, ?, ?, ?)}")) {

                stmt.setInt(1, obtenerNuevoID());
                stmt.setString(2, nombre);
                stmt.setString(3, descripcion);
                stmt.setDouble(4, Double.parseDouble(precioStr));
                stmt.setInt(5, Integer.parseInt(stockStr));
                stmt.setInt(6, Integer.parseInt(idCategoriaStr));
                stmt.execute();

                JOptionPane.showMessageDialog(this, "Producto agregado correctamente.");
                tablaProducto.setModel(ProductoDAO.obtenerProductos());

            } catch (SQLException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Error al agregar el producto.");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Por favor, complete todos los espacios.");
        }
    }//GEN-LAST:event_CrearProductoActionPerformed

    private void EditarProductoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditarProductoActionPerformed

        int fila = tablaProducto.getSelectedRow();
        if (fila == -1) {
            JOptionPane.showMessageDialog(this, "Seleccione un producto.");
            return;
        }
        int id = (int) tablaProducto.getValueAt(fila, 0);
        String nuevoNombre = JOptionPane.showInputDialog("Nuevo nombre:", tablaProducto.getValueAt(fila, 1));
        String nuevaDescripcion = JOptionPane.showInputDialog("Nueva descripciÃ³n:", tablaProducto.getValueAt(fila, 2));
        String nuevoPrecioStr = JOptionPane.showInputDialog("Nuevo precio:", tablaProducto.getValueAt(fila, 3));
        String nuevoStockStr = JOptionPane.showInputDialog("Nuevo stock:", tablaProducto.getValueAt(fila, 4));
        String nuevaCategoriaStr = JOptionPane.showInputDialog("Nuevo ID de categorÃ­a:", tablaProducto.getValueAt(fila, 5));

        if (nuevoNombre != null && !nuevoNombre.trim().isEmpty()
                && nuevaDescripcion != null && !nuevaDescripcion.trim().isEmpty()
                && nuevoPrecioStr != null && !nuevoPrecioStr.trim().isEmpty()
                && nuevoStockStr != null && !nuevoStockStr.trim().isEmpty()
                && nuevaCategoriaStr != null && !nuevaCategoriaStr.trim().isEmpty()) {

            try (Connection con = ConexionOracle.getConnection(); CallableStatement stmt = con.prepareCall("{CALL ACTUALIZAR_PRODUCTO(?, ?, ?, ?, ?, ?)}")) {

                stmt.setInt(1, id);
                stmt.setString(2, nuevoNombre);
                stmt.setString(3, nuevaDescripcion);
                stmt.setDouble(4, Double.parseDouble(nuevoPrecioStr));
                stmt.setInt(5, Integer.parseInt(nuevoStockStr));
                stmt.setInt(6, Integer.parseInt(nuevaCategoriaStr));
                stmt.execute();

                JOptionPane.showMessageDialog(this, "Producto actualizado.");
                tablaProducto.setModel(ProductoDAO.obtenerProductos()); // Actualizar tabla

            } catch (SQLException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Error al actualizar el producto.");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Por favor, complete todos los campos.");
        }
    }//GEN-LAST:event_EditarProductoActionPerformed

    private void BorrarProductoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BorrarProductoActionPerformed
        
        int fila = tablaProducto.getSelectedRow();
        if (fila == -1) {
            JOptionPane.showMessageDialog(this, "Seleccione un producto.");
            return;
        }
        
        int id = (int) tablaProducto.getValueAt(fila, 0);
        int confirm = JOptionPane.showConfirmDialog(this, "Â¿Seguro que desea eliminar este proveedor?", "Confirmar", JOptionPane.YES_NO_OPTION);
        
        if (confirm == JOptionPane.YES_OPTION) {
        try (Connection con = ConexionOracle.getConnection(); 
             CallableStatement stmt = con.prepareCall("{CALL ELIMINAR_PRODUCTO(?)}")) {

            stmt.setInt(1, id);
            stmt.execute();

            JOptionPane.showMessageDialog(this, "Producto eliminado correctamente.");
            tablaProducto.setModel(ProductoDAO.obtenerProductos()); 

        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al eliminar el producto.");
        }
    }        
    }//GEN-LAST:event_BorrarProductoActionPerformed

    private void CrearDetVentasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CrearDetVentasActionPerformed
        try {
            int idVenta = Integer.parseInt(JOptionPane.showInputDialog("Ingrese el ID de la venta:"));
            int idProducto = Integer.parseInt(JOptionPane.showInputDialog("Ingrese el ID del producto:"));
            int cantidad = Integer.parseInt(JOptionPane.showInputDialog("Ingrese la cantidad:"));
            double precioUnitario = Double.parseDouble(JOptionPane.showInputDialog("Ingrese el precio unitario:"));

            try (Connection con = ConexionOracle.getConnection();
                CallableStatement stmt = con.prepareCall("{CALL INSERTAR_DETALLE_VENTA(?, ?, ?, ?, ?)}")) {

                stmt.setInt(1, obtenerNuevoID()); // Genera nuevo ID para el detalle
                stmt.setInt(2, idVenta);
                stmt.setInt(3, idProducto);
                stmt.setInt(4, cantidad);
                stmt.setDouble(5, precioUnitario);
                stmt.execute();

                JOptionPane.showMessageDialog(this, "Detalle de venta agregado.");
                tablaDetVentas.setModel(DetalleVentasDAO.obtenerDetalleVentas());

            } catch (SQLException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Error al agregar el detalle de venta.");
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Entrada invÃ¡lida. Por favor ingrese solo nÃºmeros.");
        }
    }//GEN-LAST:event_CrearDetVentasActionPerformed

    private void EditarDetVentasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditarDetVentasActionPerformed
        int fila = tablaDetVentas.getSelectedRow();
        if (fila == -1) {
            JOptionPane.showMessageDialog(this, "Seleccione un detalle de venta.");
            return;
        }

        int id = (int) tablaDetVentas.getValueAt(fila, 0);
        int nuevaCantidad = Integer.parseInt(JOptionPane.showInputDialog("Nueva cantidad:", tablaDetVentas.getValueAt(fila, 3)));
        double nuevoPrecioUnitario = Double.parseDouble(JOptionPane.showInputDialog("Nuevo precio unitario:", tablaDetVentas.getValueAt(fila, 4)));

        try (Connection con = ConexionOracle.getConnection();
            CallableStatement stmt = con.prepareCall("{CALL ACTUALIZAR_DETALLE_VENTA(?, ?, ?)}")) {

            stmt.setInt(1, id);
            stmt.setInt(2, nuevaCantidad);
            stmt.setDouble(3, nuevoPrecioUnitario);
            stmt.execute();

            JOptionPane.showMessageDialog(this, "Detalle de venta actualizado.");
            tablaDetVentas.setModel(DetalleVentasDAO.obtenerDetalleVentas());
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al actualizar el detalle de venta.");
        }
    }//GEN-LAST:event_EditarDetVentasActionPerformed

    private void EliminarDetVentasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EliminarDetVentasActionPerformed
        int fila = tablaDetVentas.getSelectedRow();
        if (fila == -1) {
            JOptionPane.showMessageDialog(this, "Seleccione un detalle de venta.");
            return;
        }

        int id = (int) tablaDetVentas.getValueAt(fila, 0);

        int confirm = JOptionPane.showConfirmDialog(this, "Â¿Seguro que desea eliminar este detalle de venta?", "Confirmar", JOptionPane.YES_NO_OPTION);
        if (confirm == JOptionPane.YES_OPTION) {
            try (Connection con = ConexionOracle.getConnection();
                CallableStatement stmt = con.prepareCall("{CALL ELIMINAR_DETALLE_VENTA(?)}")) {

                stmt.setInt(1, id);
                stmt.execute();

                JOptionPane.showMessageDialog(this, "Detalle de venta eliminado.");
                tablaDetVentas.setModel(DetalleVentasDAO.obtenerDetalleVentas());
            } catch (SQLException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Error al eliminar el detalle de venta.");
            }
        }
    }//GEN-LAST:event_EliminarDetVentasActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Menu().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BorrarCategoria;
    private javax.swing.JButton BorrarProducto;
    private javax.swing.JButton BorrarProveedor;
    private javax.swing.JButton BorrarVentas;
    private javax.swing.JPanel Categorias;
    private javax.swing.JPanel Clientes;
    private javax.swing.JPanel Compras;
    private javax.swing.JButton CrearCategoria;
    private javax.swing.JButton CrearClientes;
    private javax.swing.JButton CrearCompra;
    private javax.swing.JButton CrearDetVentas;
    private javax.swing.JButton CrearEmpleado;
    private javax.swing.JButton CrearProducto;
    private javax.swing.JButton CrearProveedor;
    private javax.swing.JButton CrearVentas;
    private javax.swing.JPanel DetVentas;
    private javax.swing.JButton EditarCategoria;
    private javax.swing.JButton EditarClientes;
    private javax.swing.JButton EditarCompra;
    private javax.swing.JButton EditarDetVentas;
    private javax.swing.JButton EditarEmpleado;
    private javax.swing.JButton EditarProducto;
    private javax.swing.JButton EditarProveedor;
    private javax.swing.JButton EditarVentas;
    private javax.swing.JButton EliminarClientes;
    private javax.swing.JButton EliminarCompra;
    private javax.swing.JButton EliminarDetVentas;
    private javax.swing.JButton EliminarEmpleado;
    private javax.swing.JPanel Empleados;
    private javax.swing.JPanel Ventas;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable tablaCategorias;
    private javax.swing.JTable tablaClientes;
    private javax.swing.JTable tablaCompras;
    private javax.swing.JTable tablaDetVentas;
    private javax.swing.JTable tablaEmpleados;
    private javax.swing.JTable tablaProducto;
    private javax.swing.JTable tablaProveedor;
    private javax.swing.JTable tablaVentas;
    // End of variables declaration//GEN-END:variables
}
